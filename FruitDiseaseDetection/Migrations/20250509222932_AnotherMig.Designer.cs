// <auto-generated />
using System;
using FruitDiseaseDetection.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FruitDiseaseDetection.Migrations
{
    [DbContext(typeof(FruitDbContext))]
    [Migration("20250509222932_AnotherMig")]
    partial class AnotherMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("DiseaseFruit", b =>
                {
                    b.Property<int>("DiseasesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FruitsVegetablesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DiseasesId", "FruitsVegetablesId");

                    b.HasIndex("FruitsVegetablesId");

                    b.ToTable("DiseaseFruit");
                });

            modelBuilder.Entity("FruitDiseaseDetection.Models.Disease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommonName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DiseaseDetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symptoms")
                        .HasColumnType("TEXT");

                    b.Property<string>("TreatmentSuggestion")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseDetailsId");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("FruitDiseaseDetection.Models.Fruit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FruitDetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Species")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FruitDetailsId");

                    b.ToTable("Fruits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Apple",
                            Species = "Gala"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Grape",
                            Species = "Vitis"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Peach",
                            Species = "Prunus"
                        });
                });

            modelBuilder.Entity("FruitDiseaseDetection.Models.FruitVegetableDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("FruitVegetableId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FruitVegetableDetails");
                });

            modelBuilder.Entity("FruitDiseaseDetection.Models.ImageResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AnalysisDate")
                        .HasColumnType("TEXT");

                    b.Property<float?>("Confidence")
                        .HasColumnType("REAL");

                    b.Property<int?>("DetectedDiseaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModelLabel")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DetectedDiseaseId");

                    b.ToTable("ImageResults");
                });

            modelBuilder.Entity("FruitDiseaseDetection.Models.UploadedImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FruitVegetableId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("BLOB");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageResultId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FruitVegetableId");

                    b.HasIndex("ImageResultId");

                    b.HasIndex("UserId");

                    b.ToTable("UploadedImages");
                });

            modelBuilder.Entity("FruitDiseaseDetection.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DiseaseFruit", b =>
                {
                    b.HasOne("FruitDiseaseDetection.Models.Disease", null)
                        .WithMany()
                        .HasForeignKey("DiseasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FruitDiseaseDetection.Models.Fruit", null)
                        .WithMany()
                        .HasForeignKey("FruitsVegetablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FruitDiseaseDetection.Models.Disease", b =>
                {
                    b.HasOne("FruitDiseaseDetection.Models.FruitVegetableDetails", "DiseaseDetails")
                        .WithMany()
                        .HasForeignKey("DiseaseDetailsId");

                    b.Navigation("DiseaseDetails");
                });

            modelBuilder.Entity("FruitDiseaseDetection.Models.Fruit", b =>
                {
                    b.HasOne("FruitDiseaseDetection.Models.FruitVegetableDetails", "FruitDetails")
                        .WithMany()
                        .HasForeignKey("FruitDetailsId");

                    b.Navigation("FruitDetails");
                });

            modelBuilder.Entity("FruitDiseaseDetection.Models.ImageResult", b =>
                {
                    b.HasOne("FruitDiseaseDetection.Models.Disease", "DetectedDisease")
                        .WithMany()
                        .HasForeignKey("DetectedDiseaseId");

                    b.Navigation("DetectedDisease");
                });

            modelBuilder.Entity("FruitDiseaseDetection.Models.UploadedImage", b =>
                {
                    b.HasOne("FruitDiseaseDetection.Models.Fruit", "FruitVegetable")
                        .WithMany()
                        .HasForeignKey("FruitVegetableId");

                    b.HasOne("FruitDiseaseDetection.Models.ImageResult", "ImageResult")
                        .WithMany()
                        .HasForeignKey("ImageResultId");

                    b.HasOne("FruitDiseaseDetection.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("FruitVegetable");

                    b.Navigation("ImageResult");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
